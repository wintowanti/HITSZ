#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
using namespace std;

const int MX = 1000; // MX is the max size of point
const int INF = 0x3f3f3f3f; // A big integer number
double dp[MX][MX];
double point[MX][2];

//get the distance of the two points indexs are index_1 index_2
double get_dis(int index_1,int index_2){
    double ans = (point[index_1][0] - point[index_2][0]) *(point[index_1][0] - point[index_2][0]);
    ans += (point[index_1][1] - point[index_2][1]) *(point[index_1][1] - point[index_2][1]);
    return sqrt(ans);
}

//get the value of the triangle which point indexs are index_1,index_2,and index_3
double get_triangle(int index_1,int index_2,int index_3){
   return get_dis(index_1,index_2) + get_dis(index_2,index_3) + get_dis(index_3,index_1);
}
int main(){
    int n;
    while(~scanf("n=%d",&n)){
        for(int i = 0; i < n; i++){
            cin>>point[i][0]>>point[i][1];
        }
        //init each value equal INF
        for(int i = 0; i < n; i++) 
            for(int j = 0; j < n; j++) 
                dp[i][j] = INF * 1.0;
        for(int i = 0; i < n; i++){
            for(int j = 0; i + j < n ;j++){
                if(i == 0 || i == 1){
                    dp[i][j] = 0.00;
                }
                else{
                    for(int k = j+1; k < j + i; k++){
                        dp[j][j + i] = min(dp[j][j + i], dp[j][k] + dp[k][j + i] + get_triangle(j,k,j + i));
                    }
                }
            }
        }
        cout<<dp[0][n-1]<<endl;

    }
}

